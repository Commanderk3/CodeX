[
  {
    "title": "Palindrome Number",
    "problem_id": "3",
    "difficulty": "Easy",
    "topics": ["Math"],
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
    "test_cases": [
      {
        "input": {
          "x": 121
        },
        "output": true
      },
      {
        "input": {
          "x": -121
        },
        "output": false
      },
      {
        "input": {
          "x": 10
        },
        "output": false
      }
    ],
    "boilerplate": {
      "python": "def isPalindrome(x: int) -> bool:\n    # Your code here",
      "c++": "bool isPalindrome(int x) {\n    // Your code here\n}",
      "java": "public boolean isPalindrome(int x) {\n    // Your code here\n}",
      "javascript": "function isPalindrome(x) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "problem_id": "4",
    "difficulty": "Medium",
    "topics": ["Hash Table", "String", "Sliding Window"],
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "test_cases": [
      {
        "input": {
          "s": "abcabcbb"
        },
        "output": 3
      },
      {
        "input": {
          "s": "bbbbb"
        },
        "output": 1
      },
      {
        "input": {
          "s": "pwwkew"
        },
        "output": 3
      }
    ],
    "boilerplate": {
      "python": "def lengthOfLongestSubstring(s: str) -> int:\n    # Your code here",
      "c++": "int lengthOfLongestSubstring(string s) {\n    // Your code here\n}",
      "java": "public int lengthOfLongestSubstring(String s) {\n    // Your code here\n}",
      "javascript": "function lengthOfLongestSubstring(s) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Reverse Integer",
    "problem_id": "5",
    "difficulty": "Medium",
    "topics": ["Math"],
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
    "test_cases": [
      {
        "input": {
          "x": 123
        },
        "output": 321
      },
      {
        "input": {
          "x": -123
        },
        "output": -321
      },
      {
        "input": {
          "x": 120
        },
        "output": 21
      }
    ],
    "boilerplate": {
      "python": "def reverse(x: int) -> int:\n    # Your code here",
      "c++": "int reverse(int x) {\n    // Your code here\n}",
      "java": "public int reverse(int x) {\n    // Your code here\n}",
      "javascript": "function reverse(x) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Valid Parentheses",
    "problem_id": "6",
    "difficulty": "Easy",
    "topics": ["String", "Stack"],
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    "test_cases": [
      {
        "input": {
          "s": "()"
        },
        "output": true
      },
      {
        "input": {
          "s": "()[]{}"
        },
        "output": true
      },
      {
        "input": {
          "s": "(]"
        },
        "output": false
      }
    ],
    "boilerplate": {
      "python": "def isValid(s: str) -> bool:\n    # Your code here",
      "c++": "bool isValid(string s) {\n    // Your code here\n}",
      "java": "public boolean isValid(String s) {\n    // Your code here\n}",
      "javascript": "function isValid(s) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Merge Two Sorted Lists",
    "problem_id": "7",
    "difficulty": "Easy",
    "topics": ["Linked List", "Recursion"],
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.",
    "test_cases": [
      {
        "input": {
          "l1": [1, 2, 4],
          "l2": [1, 3, 4]
        },
        "output": [1, 1, 2, 3, 4, 4]
      },
      {
        "input": {
          "l1": [],
          "l2": []
        },
        "output": []
      },
      {
        "input": {
          "l1": [],
          "l2": [0]
        },
        "output": [0]
      }
    ],
    "boilerplate": {
      "python": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\ndef mergeTwoLists(l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n    # Your code here",
      "c++": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n    // Your code here\n}",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    // Your code here\n}",
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction mergeTwoLists(l1, l2) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Search in Rotated Sorted Array",
    "problem_id": "8",
    "difficulty": "Medium",
    "topics": ["Array", "Binary Search"],
    "description": "Given an integer array nums sorted in ascending order (with distinct values), and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
    "test_cases": [
      {
        "input": {
          "nums": [4, 5, 6, 7, 0, 1, 2],
          "target": 0
        },
        "output": 4
      },
      {
        "input": {
          "nums": [4, 5, 6, 7, 0, 1, 2],
          "target": 3
        },
        "output": -1
      },
      {
        "input": {
          "nums": [1],
          "target": 0
        },
        "output": -1
      }
    ],
    "boilerplate": {
      "python": "def search(nums: List[int], target: int) -> int:\n    # Your code here",
      "c++": "int search(vector<int>& nums, int target) {\n    // Your code here\n}",
      "java": "public int search(int[] nums, int target) {\n    // Your code here\n}",
      "javascript": "function search(nums, target) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Container With Most Water",
    "problem_id": "9",
    "difficulty": "Medium",
    "topics": ["Array", "Two Pointers", "Greedy"],
    "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
    "test_cases": [
      {
        "input": {
          "height": [1, 8, 6, 2, 5, 4, 8, 3, 7]
        },
        "output": 49
      },
      {
        "input": {
          "height": [1, 1]
        },
        "output": 1
      },
      {
        "input": {
          "height": [4, 3, 2, 1, 4]
        },
        "output": 16
      }
    ],
    "boilerplate": {
      "python": "def maxArea(height: List[int]) -> int:\n    # Your code here",
      "c++": "int maxArea(vector<int>& height) {\n    // Your code here\n}",
      "java": "public int maxArea(int[] height) {\n    // Your code here\n}",
      "javascript": "function maxArea(height) {\n    // Your code here\n}"
    }
  },
  {
    "title": "3Sum",
    "problem_id": "10",
    "difficulty": "Medium",
    "topics": ["Array", "Two Pointers", "Sorting"],
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j != k and nums[i] + nums[j] + nums[k] == 0.",
    "test_cases": [
      {
        "input": {
          "nums": [-1, 0, 1, 2, -1, -4]
        },
        "output": [
          [-1, -1, 2],
          [-1, 0, 1]
        ]
      },
      {
        "input": {
          "nums": []
        },
        "output": []
      },
      {
        "input": {
          "nums": [0]
        },
        "output": []
      }
    ],
    "boilerplate": {
      "python": "def threeSum(nums: List[int]) -> List[List[int]]:\n    # Your code here",
      "c++": "vector<vector<int>> threeSum(vector<int>& nums) {\n    // Your code here\n}",
      "java": "public List<List<Integer>> threeSum(int[] nums) {\n    // Your code here\n}",
      "javascript": "function threeSum(nums) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Remove Nth Node From End of List",
    "problem_id": "11",
    "difficulty": "Medium",
    "topics": ["Linked List", "Two Pointers"],
    "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
    "test_cases": [
      {
        "input": {
          "head": [1, 2, 3, 4, 5],
          "n": 2
        },
        "output": [1, 2, 3, 5]
      },
      {
        "input": {
          "head": [1],
          "n": 1
        },
        "output": []
      },
      {
        "input": {
          "head": [1, 2],
          "n": 1
        },
        "output": [1]
      }
    ],
    "boilerplate": {
      "python": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\ndef removeNthFromEnd(head: Optional[ListNode], n: int) -> Optional[ListNode]:\n    # Your code here",
      "c++": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nListNode* removeNthFromEnd(ListNode* head, int n) {\n    // Your code here\n}",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\npublic ListNode removeNthFromEnd(ListNode head, int n) {\n    // Your code here\n}",
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction removeNthFromEnd(head, n) {\n    // Your code here\n}"
    }
  },
  {
    "title": "Letter Combinations of a Phone Number",
    "problem_id": "12",
    "difficulty": "Medium",
    "topics": ["Hash Table", "String", "Backtracking"],
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.",
    "test_cases": [
      {
        "input": {
          "digits": "23"
        },
        "output": ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
      },
      {
        "input": {
          "digits": ""
        },
        "output": []
      },
      {
        "input": {
          "digits": "2"
        },
        "output": ["a", "b", "c"]
      }
    ],
    "boilerplate": {
      "python": "def letterCombinations(digits: str) -> List[str]:\n    # Your code here",
      "c++": "vector<string> letterCombinations(string digits) {\n    // Your code here\n}",
      "java": "public List<String> letterCombinations(String digits) {\n    // Your code here\n}",
      "javascript": "function letterCombinations(digits) {\n    // Your code here\n}"
    }
  }
]